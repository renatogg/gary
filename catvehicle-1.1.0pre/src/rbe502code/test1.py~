#!/usr/bin/env python


import rospy, tf, numpy, math
from std_msgs.msg import String
from geometry_msgs.msg import Twist, Pose
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseStamped
from tf.transformations import euler_from_quaternion


wheel_rad = 3.5 / 100.0 #cm
wheel_base = 23.0 / 100.0 #cm

def sendMoveMsg(linearVelocity, angularVelocity):
    """Send a movement (twist) message."""
    global pub
    msg = Twist()
    msg.linear.x = linearVelocity
    msg.angular.z = angularVelocity
    pub.publish(msg)


def navToPose(goal):
    """Drive to a goal subscribed to from /move_base_simple/goal"""
    #compute angle required to make straight-line move to desired pose
    global xPosition
    global yPosition
    global theta
    #capture desired x and y positions
    desiredY = goal.pose.position.y
    desiredX = goal.pose.position.x
    #capture desired angle
    quat = goal.pose.orientation
    q = [quat.x, quat.y, quat.z, quat.w]
    roll, pitch, yaw = euler_from_quaternion(q)
    desiredT = yaw * (180.0/math.pi)
    #compute distance to target
    distance = math.sqrt(math.pow((desiredX - xPosition), 2) + math.pow((desiredY - yPosition), 2))
    adjustedX = goal.pose.position.x - xPosition
    adjustedY = goal.pose.position.y - yPosition
    print goal.pose.position.x, goal.pose.position.y
    print xPosition, yPosition
    print adjustedX, adjustedY
    #compute initial turn amount
    initialTurn = (math.atan2(adjustedY, adjustedX) * (180 / math.pi)) - theta

    print "moving from (" + str(xPosition) + ", " + str(yPosition) + ") @ " + str(theta) + " degrees"
    print "moving to (" + str(desiredX) + ", " + str(desiredY) + ") @ " + str(desiredT) + " degrees"
    print "distance: " + str(distance) + ", initial turn: " + str(initialTurn)
    print "spin!" #turn to calculated angle
    rotate(initialTurn)
    print "move!" #move in straight line specified distance to new pose
    driveSmooth(0.25, distance)
    rospy.sleep(2)
    print "spin!" #spin to final angle
    finalTurn = desiredT - theta
    print "rotate " + str(finalTurn) +  " to " + str(desiredT)
    rotate(finalTurn)
    print "done"


def executeTrajectory():
    """This function sequentially calls methods to perform a trajectory."""
    driveStraight(1, 0.6)
    rotate(-90)
    driveStraight(1, .45)
    rotate(135)


def spinWheels(u1, u2, time):
    """This function accepts two wheel velocities and a time interval."""
    global pub

    r = wheel_rad
    b = wheel_base
    #compute wheel speeds
    u = (r / 2) * (u1 + u2)
    w = (r / b) * (u1 - u2)
    start = rospy.Time().now().secs
    #create movement and stop messages
    move_msg = Twist()
    move_msg.linear.x = u
    move_msg.angular.z = w
    stop_msg = Twist()
    stop_msg.linear.x = 0
    stop_msg.angular.z = 0
    #publish move message for desired time
    while(rospy.Time().now().secs - start < time and not rospy.is_shutdown()):
        pub.publish(move_msg)
    pub.publish(stop_msg)


def driveStraight(speed, distance):
    """This function accepts a speed and a distance for the robot to move in a straight line"""
    global pose

    initialX = pose.pose.position.x
    initialY = pose.pose.position.y

    atTarget = False
    while (not atTarget and not rospy.is_shutdown()):
        currentX = pose.pose.position.x
        currentY = pose.pose.position.y
        currentDistance = math.sqrt(math.pow((currentX - initialX), 2) + math.pow((currentY - initialY), 2))
        if (currentDistance >= distance):
            atTarget = True
            sendMoveMsg(0, 0)
        else:
            sendMoveMsg(speed, 0)
            rospy.sleep(0.15)


def driveSmooth(speed, distance):
    """This function accepts a speed and a distance for the robot to move in a smoothed straight line."""
    global pose

    initialX = pose.position.x
    initialY = pose.position.y
    atTarget = False
    rampSpeed = 0.0
    sleepTime = 0.05
    rampPercentage = 0.3
    step = speed / ((rampPercentage * (distance / speed)) / sleepTime)
    print "Step size: " + str(step)
    while (not atTarget and not rospy.is_shutdown()):
        currentX = pose.position.x
        currentY = pose.position.y
        currentDistance = math.sqrt(math.pow((currentX - initialX), 2) + math.pow((currentY - initialY), 2))
        if (currentDistance >= distance):
            atTarget = True
            sendMoveMsg(0, 0)
        else:
            if ((distance - currentDistance) <= distance * rampPercentage and rampSpeed >= 0):
                rampSpeed -= step
                sendMoveMsg(rampSpeed, 0)
            elif ((distance - currentDistance) >= distance * (1.0 - rampPercentage) and rampSpeed <= speed):
                rampSpeed += step
                sendMoveMsg(rampSpeed, 0)
            else:
                sendMoveMsg(speed, 0)
            rospy.sleep(sleepTime)


def rotate(angle):
    global odom_list
    global pose
    if (angle > 180 or angle<-180):
        print "angle is to large or small"
    vel = Twist();   
    done = True

    # set rotation direction
    error = angle-math.degrees(pose.orientation.z)
    if (angle >=0):
        vel.angular.z = 0.35
        pub.publish(vel)
    if (angle < 0):
        vel.angular.z = -0.35
        pub.publish(vel)

    angle= angle + math.degrees(pose.orientation.z)
    if (angle > 180):
        angle = angle - 360
    if (angle < -180):
        angle = angle + 360
    while ((abs(error) >= 2) and not rospy.is_shutdown()):
            #print "theta: %d" % math.degrees(pose.orientation.z)
            #print "angle: %d" % angle
            error = angle-math.degrees(pose.orientation.z)
            #print "error: %d" % error
            pub.publish(vel)
            rospy.sleep(.01)
    vel.angular.z = 0.0
    pub.publish(vel)


def rotateDegrees(angle):
    """Rotate and angle in degrees."""
    rotate(angle * (math.pi / 180))


def driveArc(radius, speed, angle):
    """This function works the same as rotate how ever it does not publish linear velocities."""
    #assuming radius is turning radius, speed is drive speed, angle is desired final angle
    #calculate wheel speeds and time to move from current pose to final pose
    #spinWheels with time and speeds to move to correct pose
    pass  # Delete this 'pass' once implemented


def readBumper(msg):
    """Bumper event callback"""
    if (msg.state == 1):
        # What should happen when the bumper is pressed?
        #Stop forward motion if bumper is pressed
        print "Bumper pressed!"
        executeTrajectory()


#Odometry Callback function.
def readOdom(msg):
    """Read odometry messages and store into global variables."""
#    global pose
#    global xPosition
#    global yPosition
#    global theta
#    global odom_list
#    try:
#        (trans, rot) = odom_list.lookupTransform('map', 'base_footprint', rospy.Time(0))
#        roll, pitch, yaw = euler_from_quaternion(rot)
#        theta = yaw * (180.0/math.pi)
#        xPosition = trans[0]
#        yPosition = trans[1]
#    except:
#        print "Waiting for tf..."

def tCallback(event):
	
    global pose
    global xPosition
    global yPosition
    global theta

    odom_list.waitForTransform('map', 'base_footprint', rospy.Time(0), rospy.Duration(1.0))
    (position, orientation) = odom_list.lookupTransform('map','base_footprint', rospy.Time(0))
    pose.position.x=position[0]
    pose.position.y=position[1]
    xPosition=position[0]
    yPosition=position[1]

    odomW = orientation
    q = [odomW[0], odomW[1], odomW[2], odomW[3]]
    roll, pitch, yaw = euler_from_quaternion(q)
    #convert yaw to degrees
    pose.orientation.z = yaw
    theta = math.degrees(yaw)



# This is the program's main function
if __name__ == '__main__':
    rospy.init_node('sample_Lab_2_node_ajlockman')
    global pub
    global pose
    global odom_list
    #global odom_tf
    pose = Pose()
    pub = rospy.Publisher('cmd_vel_mux/input/teleop', Twist, None, queue_size=10) # Publisher for commanding robot motion
    bumper_sub = rospy.Subscriber('mobile_base/events/bumper', BumperEvent, readBumper, queue_size=1) # Callback function to handle bumper events
    goal_sub = rospy.Subscriber('move_base_simple/goal', PoseStamped, navToPose, queue_size=1)
    sub = rospy.Subscriber('/odom', Odometry, readOdom)
    rospy.Timer(rospy.Duration(.01), tCallback)
    odom_list = tf.TransformListener()
    rospy.sleep(2)

    print "Starting Lab 2"

    while not rospy.is_shutdown():
        rospy.spin()
    
    print "Lab 2 complete!"
